<?php $root = $_SERVER['DOCUMENT_ROOT'];?>
<?php require_once $root . '/template/header.php';?>

<ul class="concept mt-1 mb-1">
  <li>
    <p><span>Класс</span>— это тип данных, определяемый программистом, который включает как локальные функции, так и
      локальные данные. Вы можете думать о классе как о шаблоне для создания множества экземпляров одного и того же вида
      (или класса) объекта</p>
  </li>
  <li>
    <p><span>Объект</span>— отдельный экземпляр структуры данных, определенной классом. Вы определяете класс один раз, а
      затем создаете множество объектов, которые ему принадлежат. Объекты также известны как экземпляры</p>
  </li>
  <li>
    <p><span>Переменная-член</span>— это переменные, определенные внутри класса. Эти данные будут невидимы для внешнего
      класса, и к ним можно будет получить доступ через функции-члены. Эти переменные называются атрибутом объекта после
      создания объекта</p>
  </li>
  <li>
    <p><span>Функция-член</span>— это функция, определенная внутри класса и используемая для доступа к данным объекта
    </p>
  </li>
  <li>
    <p><span>Наследование</span>— когда класс определяется путем наследования существующей функции родительского класса,
      это называется наследованием. Здесь дочерний класс наследует все или несколько функций-членов и переменных
      родительского класса</p>
  </li>
  <li>
    <p><span>Родительский класс</span>класс, унаследованный от другого класса. Это также называется базовым классом или
      суперклассом</p>
  </li>
  <li>
    <p><span>Дочерний класс</span>— класс, наследуемый от другого класса. Это также называется подклассом или
      производным классом</p>
  </li>
  <li>
    <p><span>Полиморфизм</span>— это объектно-ориентированная концепция, в которой одна и та же функция может
      использоваться для разных целей. Например, имя функции останется прежним, но она принимает другое количество
      аргументов и может выполнять разные задачи</p>
  </li>
  <li>
    <p><span>Перегрузка</span>— тип полиморфизма, при котором некоторые или все операторы имеют разные реализации в
      зависимости от типов их аргументов. Точно так же функции могут быть перегружены другой реализацией</p>
  </li>
  <li>
    <p><span>Абстракция данных</span>— любое представление данных, в котором детали реализации скрыты (абстрагированы)
    </p>
  </li>
  <li>
    <p><span>Инкапсуляция</span>— относится к концепции, при которой мы инкапсулируем все данные и функции-члены вместе
      для формирования объекта</p>
  </li>
  <li>
    <p><span>Конструктор</span>— относится к особому типу функции, которая будет вызываться автоматически при
      формировании объекта из класса</p>
  </li>
  <li>
    <p><span>Деструктор</span>— относится к особому типу функции, которая будет вызываться автоматически всякий раз,
      когда объект удаляется или выходит за пределы области видимости</p>
  </li>
</ul>

<p class="mb-1">Итак, класс — это шаблон для объектов, а объект — это экземпляр класса. Когда создаются отдельные
  объекты, они наследуют все свойства и поведение класса, но каждый объект будет иметь разные значения свойств</p>

<?php require_once $root . '/template/footer.php';?>